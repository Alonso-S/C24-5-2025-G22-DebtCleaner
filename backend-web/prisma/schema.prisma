// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  PROFESSOR
  ADMIN
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  role           Role            @default(STUDENT)
  githubToken    String?         // Token de acceso para GitHub OAuth
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdCourses Course[]        @relation("CourseCreator")
  enrollments    Enrollment[]
  projects       ProjectSubmission[]

  @@map("users")
}

model Course {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  accessCode   String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  creatorId    Int
  creator      User         @relation("CourseCreator", fields: [creatorId], references: [id])
  enrollments  Enrollment[]
  projects     Project[]

  @@map("courses")
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Project {
  id          Int                 @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  courseId    Int
  course      Course              @relation(fields: [courseId], references: [id])
  submissions ProjectSubmission[]

  @@map("projects")
}

model ProjectSubmission {
  id                Int                      @id @default(autoincrement())
  content           String?                  // Descripción o comentarios de la entrega
  fileUrl           String?                  // URL del archivo ZIP subido
  gitRepositoryUrl  String?                  // URL del repositorio Git
  grade             Float?
  feedback          String?
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  projectId         Int
  userId            Int
  project           Project                  @relation(fields: [projectId], references: [id])
  user              User                     @relation(fields: [userId], references: [id])
  versions          ProjectSubmissionVersion[]

  @@map("project_submissions")
}

model ProjectSubmissionVersion {
  id                Int               @id @default(autoincrement())
  versionNumber     Int               // Número secuencial de versión
  fileUrl           String?           // URL del archivo ZIP de esta versión
  gitCommitHash     String?           // Hash del commit en el repositorio Git
  content           String?           // Descripción o comentarios de esta versión
  createdAt         DateTime          @default(now())
  submissionId      Int
  submission        ProjectSubmission @relation(fields: [submissionId], references: [id])

  @@unique([submissionId, versionNumber])
  @@map("project_submission_versions")
}
